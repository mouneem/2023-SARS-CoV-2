rowSums(as.numeric(sus))
View(sus)
colSums(as.numeric(sus))
as.numeric(sus)
View(sus)
View(Subm)
subs <- read.csv2('../data/monthly_sub.csv', sep=',',colClasses="character",na.strings="?", header = TRUE)
rownames(subs) <- subs[,1]
subs <- subs[,-1]
View(subs)
reg <- unique(cov[c('location','continent')])
subs$location <- rownames(subs)
View(subs)
View(Subm)
Subm <- merge(subs, reg)
View(Subm)
rownames(Subm) <- Subm[,1]
Subm <- Subm[,-1]
View(Subm)
aggregate(  Subm[,1:37] , Subm[,38], FUN = sum )
Subm %>%
group_by(continent) %>%
summarise_each(funs(sum))
View(Subm)
Subm %>%
group_by(continent) %>%
summarise_each(funs(sum))
X <- Subm %>%
group_by(continent) %>%
summarise_each(funs(sum))
subm <- melt(Subm)
View(subm)
View(subm)
subm <- melt(Subm)
View(subm)
?melt
subm$loc <- rownames(subm)
View(subm)
subm <- melt(Subm, id='loc')
View(subm)
subm <- melt(Subm, id=loc)
Subm$loc <- rownames(Subm)
subm <- melt(Subm, id='loc')
View(subm)
subs <- read.csv2('../data/monthly_sub.csv', sep=',',colClasses="character",na.strings="?", header = TRUE)
subm <- melt(Subm, id='Date')
subs <- read.csv2('../data/monthly_sub.csv', sep=',',colClasses="character",na.strings="?", header = TRUE)
subm <- melt(subs, id='Date')
View(subm)
View(subm)
View(subm)
colnames(subm)[1] = 'location'
Subm <- merge(subs, reg)
View(Subm)
View(subs)
Subm <- merge(subm, reg)
View(Subm)
View(subm)
rownames(Subm) <- Subm$location
View(Subm)
View(Subm)
Subm %>% group_by(continent,variable) %>%
Subm %>% group_by(continent,variable) %>%
summarise(sum_salary=sum(value))
Subm %>% group_by(continent,variable) %>%
summarise(sum_salary=sum(value))
SUB <- Subm %>% group_by(continent,variable) %>%
summarise(sum_salary=sum(value))
View(Subm)
SUB <- Subm %>% group_by(continent,variable) %>%
summarise(S=sum(value))
View(Subm)
View(Subm)
SUB <- Subm %>% group_by(continent) %>%
summarise(S=sum(value))
SUB <- Subm %>% group_by(continent,variable) %>%
summarise(S=1)
View(SUB)
View(Subm)
Subm <- Subm[Subm$value>0,]
SUB <- Subm %>% group_by(continent,variable) %>%
summarise(S=sum(value))
Subm <- Subm[is.numeric(Subm$value),]
subs <- read.csv2('../data/monthly_sub.csv', sep=',',colClasses="character",na.strings="?", header = TRUE)
subm <- melt(subs, id='Date')
colnames(subm)[1] = 'location'
Subm <- merge(subm, reg)
Subm <- Subm[Subm$value>0,]
Subm$value <- as.numeric(Subm$value)
SUB <- Subm %>% group_by(continent,variable) %>%
summarise(S=sum(value))
View(SUB)
SUB <- Subm %>% group_by(continent,variable) %>%
summarise(Sequences=sum(value))
View(SUB)
submitions_cont <- Subm %>% group_by(continent,variable) %>%
summarise(Sequences=sum(value))
View(submitions_cont)
submitions_cont_matrix <- dcast(submitions_cont)
View(submitions_cont)
submitions_cont_matrix <- dcast(submitions_cont, variable~continent, fill = 0)
View(submitions_cont_matrix)
submitions_cont_matrix <- dcast(submitions_cont, continent~variable, fill = 0)
View(submitions_cont_matrix)
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("skyblue", "lightyellow","pink"))(50))
View(submitions_cont_matrix)
heatmap(submitions_cont_matrix)
submitions_cont_matrix <- dcast(submitions_cont, continent~variable, fill = 0)
heatmap(submitions_cont_matrix)
heatmap(as.numeric(submitions_cont_matrix))
heatmap(as.matrix(as.numeric(submitions_cont_matrix)))
View(submitions_cont_matrix)
rownames(submitions_cont_matrix) <- submitions_cont_matrix[,1]
submitions_cont_matrix <- submitions_cont_matrix[,-1]
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("skyblue", "lightyellow","pink"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("yellowgreen", "lightyellow","pink"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("darkyellowgreen", "lightyellow","pink"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("darkyellowgreen1", "lightyellow","pink"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("darkolivegreen1", "lightyellow","pink"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("pink", "lightyellow","skyblue1"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("pink2", "lightyellow","skyblue1"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("coral", "lightyellow","skyblue1"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("pink1", "lightyellow","skyblue1"))(50))
pheatmap(as.matrix(submitions_cont_matrix),cluster_cols=FALSE,cluster_rows=FALSE, color=colorRampPalette(c("pink1", "lightyellow","skyblue1"))(50))
install.packages('rworldmap')
library(rworldmap)
install.packages('rworldmap', dependencies = TRUE)
library(rworldmap)
subs <- read.csv2('../data/monthly_sub.csv', sep=',',colClasses="character",na.strings="?", header = TRUE)
rownames(subs) <- subs[,1]
subs <- subs[,-1]
submition_country <- colSums(subs)
View(subs)
submition_country <- rowSums(subs)
submition_country <- rowSums(as.numeric(subs))
submition_country <- rowCols(as.numeric(subs))
submition_country <- colSums(as.numeric(subs))
View(subs)
submition_country <- colSums(as.numeric(as.character(subs)))
S <- as.numeric(as.character(subs)
S <- as.numeric(as.character(subs))
S <- as.numeric(as.character(subs))
View(subs)
S <- as.numeric(subs)
S <- as.character(subs)
subs <- read.csv2('../data/monthly_sub.csv', sep=',', header = TRUE)
rownames(subs) <- subs[,1]
subs <- subs[,-1]
submition_country <- colSums(as.numeric(as.character(subs)))
View(subs)
str(subs)
submition_country <- colSums(subs)
submition_country
submition_country <- rowSums(subs)
submition_country <- rowSums(subs)
submition_country
joinData <- joinCountryData2Map( submition_country,
joinCode = "NAME",
nameJoinColumn = "country")
submition_country <- as.data.frame(rowSums(subs))
View(submition_country)
colnames(submition_country) <- c('submitions')
View(submition_country)
submition_country$country <- rownames(submition_country)
View(submition_country)
joinData <- joinCountryData2Map( submition_country,
joinCode = "NAME",
nameJoinColumn = "country")
View(joinData)
theMap <- mapCountryData( joinData, nameColumnToPlot="submitions", addLegend=FALSE )
do.call( addMapLegend, c(theMap, legendWidth=1, legendMar = 2))
theMap <- mapCountryData( joinData, nameColumnToPlot="submitions", addLegend=FALSE )
do.call( addMapLegend, c(theMap, legendWidth=1, legendMar = 2))
do.call( addMapLegend, c(theMap, legendWidth=1, legendMar = 2))
theMap <- mapCountryData( joinData, nameColumnToPlot="submitions", addLegend=FALSE )
#installed.packages('ggplot2')
library('ggplot2')
library(dplyr)
library(tidyverse)
library(anytime)
library(WDI)
theme_set(theme_bw())
samples <- read.csv2('../data/all_samples.tsv', sep='\t', header = TRUE)
samples$Nextstrain_clade
lineage <- samples[c('gisaid_epi_isl','continent','country','Nextstrain_clade','Nextclade_pango','date')]
lineage$Date <- anytime::anydate(lineage$date)
lineage <- lineage[lineage$Nextstrain_clade!='recombinant',]
#boxplot
ggplot(data = lineage, aes(x = Date, y = Nextstrain_clade,  fill=Nextstrain_clade))+
geom_boxplot(color='black',width=0.5)+
labs(x='Time',y='SARS-CoV-2 Clades')
#boxplot
ggplot(data = lineage, aes(x = Date, y = Nextstrain_clade,  fill=Nextstrain_clade))+
geom_boxplot(color='black',width=0.5)+
facet_wrap(.~continent, ncol=2, scales = 'free')+
labs(x='Time',y='SARS-CoV-2 Clades')
# make dates as days
## get appearance of lineage by cont
pang_app <- lineage %>%
group_by(Nextclade_pango) %>%
arrange(Date) %>%
filter(row_number()==1 )
ggplot(pang_app, aes(x=Date))+
geom_histogram(aes(y = ..density..), binwidth = 30, fill = "white",color='black')+
geom_density(adjust = 1, color = 'blue', fill='blue',alpha=.2)+
labs(y = 'Density (Lineage appearence date)')
pang_app$YM <- zoo::as.yearmon(anytime::anydate(pang_app$date))
pang_appT <- as.data.frame(table(pang_app$YM))
pang_appT$Date <- zoo::as.yearmon(pang_appT$Var1)
str(pang_appT)
ggplot(pang_appT, aes(x=anytime::anydate(Date), y=Freq))+
geom_bar(stat='identity', fill = 'lightblue')+
ggplot2::coord_cartesian(ylim = c(0,NA) )+
geom_smooth( se = FALSE, span=.35)
labs(y = 'Density (Lineage appearence date)')
# make dates as days
## get appearance of mutation by cont
mutations <- read.csv('../data/aa_mutations.csv', header=FALSE)
colnames(mutations)[1] = 'id'
library(reshape2)
mutation <- melt(mutations, 'id')[c('id','value')]
colnames(mutation) <- c('gisaid_epi_isl','Mutation')
Mutation <- merge(mutation, samples, by='gisaid_epi_isl')
Mutation$Date <- anytime::anydate(Mutation$date)
muts_app <- Mutation %>%
group_by(Mutation) %>%
arrange(Date) %>%
filter(row_number()==1 )
ggplot(muts_app, aes(x=Date))+
geom_histogram(aes(y = ..density..), binwidth = 30, fill = "white",color='black')+
geom_density(adjust = 3.5, color = 'red', fill='red',alpha=.2)+
labs(y = 'Density (Mutation appearence date)', x = 'Date (Months)')
muts_app$YM <- zoo::as.yearmon(anytime::anydate(muts_app$Date))
muts_appT <- as.data.frame(table(muts_app$YM))
muts_appT$Date <- zoo::as.yearmon(muts_appT$Var1)
str(muts_appT)
ggplot(muts_appT, aes(x=anytime::anydate(Date), y=Freq))+
geom_bar(stat='identity', fill = 'lightblue')+
geom_smooth( se = FALSE, span=.35)+
ggplot2::coord_cartesian(ylim = c(0,NA) )+
labs(y = 'Density (Lineage appearence date)')
ggplot(pang_appT, aes(x=anytime::anydate(Date), y=Freq))+
# geom_bar(stat='identity', fill = 'lightblue')+
geom_bar(data = muts_appT, aes(y = Freq/10), stat='identity', fill = 'red')+
geom_smooth( se = FALSE, span=.35, color = 'blue')+
geom_smooth(data = muts_appT, aes(y = Freq/10), se = FALSE, span=.5, color = 'red')+
ggplot2::coord_cartesian(ylim = c(0,NA) )+
labs(y = 'Density (Lineage appearence date)')
covid <- read.csv('../data/covid-19.csv')
library(zoo)
#covid <- covid[covid$iso_code == 'OWID_WRL',]
covid$Date <- anytime::anydate(covid$date)
covid$YM <- zoo::as.yearmon(anytime::anydate(covid$date))
ggplot(data = covid, aes(x=Date, y=covid$new_cases_per_million))+
facet_wrap(.~continent, scales='free')+
geom_smooth()
# make dates as days
## get appearance of lineage by cont
f_app <- lineage %>%
group_by(Nextstrain_clade) %>%
arrange(Date) %>%
filter(row_number()==1 )
f_app <- f_app[c('Date','Nextstrain_clade')]
colnames(f_app) <- c('App','Nextstrain_clade')
lineages <- merge(lineage, f_app)
lineages$day <- lineages$Date - lineages$App
ggplot(lineages , aes( x=day, color=continent ))+
facet_wrap(.~Nextstrain_clade, scales = 'free')+
geom_density()
selected <- c('20B','20A',
'20I (Alpha,V1)',
'20H (Beta, V2)', '21I (Delta)',
'21J (Delta)',
'21K (Omicron)', '21L (Omicron)',
'22B (Omicron)', '22E (Omicron)' )
ggplot(lineages[lineages$Nextstrain_clade %in% selected, ] , aes( x=day ))+
facet_wrap(.~Nextstrain_clade, scales = 'free', ncol=3)+
geom_density(alpha=.05,aes( color=continent,  fill=continent))+
geom_density(color = 'black', linetype='dashed',   adjust = 1.5)+
labs(x='Time (days)',y='Distribution')
Aflineages <- lineages[lineages$continent=='Africa',]
Aslineages <- lineages[lineages$continent=='Asia',]
SAlineages <- lineages[lineages$continent=='South America',]
# make dates as days
## get appearance of lineage by cont
f_app <- lineage %>%
group_by(Nextstrain_clade) %>%
arrange(Date) %>%
filter(row_number()==1 )
f_app <- f_app[c('Date','Nextstrain_clade')]
colnames(f_app) <- c('App','Nextstrain_clade')
lineages <- merge(lineage, f_app)
lineages$day <- lineages$Date - lineages$App
lineages_life <- lineages %>%
group_by(Nextstrain_clade, continent) %>%
summarise(Mean=mean(day), Max=max(day), Min=min(day), Median=median(day), Std=sd(day))
lineages_lifeM <- merge(lineages_life, f_app)
ggplot(lineages_lifeM, aes(x=App, y=Median, color=continent))+
geom_smooth(se=FALSE)+
geom_point()
library(ggrepel)
ggplot(lineages_lifeM, aes(x=App, y=Median))+
facet_wrap(.~continent, scales = 'free')+
geom_smooth(se=FALSE)+
geom_text_repel(aes(label=Nextstrain_clade,color=Nextstrain_clade),size=3)+
geom_point(aes(label=Nextstrain_clade,color=Nextstrain_clade),size=1)+
labs(x='Clade First Identification', y='Clade Lifespan')
escp <- unique(read.csv('../data/mut_escape.csv'))
mutations <- read.csv('../data/aa_mutations.csv', header=FALSE)
colnames(mutations)[1] = 'id'
library(reshape2)
mutation <- melt(mutations, 'id')[c('id','value')]
colnames(mutation) <- c('gisaid_epi_isl','Mutation')
Mutations <- merge(mutation, escp)
Mutation <- merge(Mutations, samples, by='gisaid_epi_isl')
Mutation <- unique(Mutation[c('Nextstrain_clade','Mutation','mut_escape')])
Mutation <- Mutation[! is.na(Mutation$mut_escape), ]
MutationEscp <- Mutation %>%
group_by(Nextstrain_clade) %>%
summarise(ESCAPE = sum(mut_escape))
MutEscp <- merge(f_app, MutationEscp)
ggplot(MutEscp, aes(x=App, y=ESCAPE))+
geom_smooth(se=FALSE, color = 'black', linetype='dashed', method='lm')+
geom_point()+
geom_text_repel(aes(label=Nextstrain_clade,color=Nextstrain_clade),size=3)+
geom_point(aes(label=Nextstrain_clade,color=Nextstrain_clade),size=1)+
labs(x='Clade First Identification', y='Clade Mutational Escape')
samples <- read.csv2('../data/samples_full.tsv',sep='\t')
div <- samples[c('gisaid_epi_isl','date','divergence')]
div <- unique(div)
div$Date <- anytime::anydate(div$date)
ggplot(div, aes(x=Date, y=as.numeric(divergence)))+
geom_point(size=.01)+
geom_smooth(se=FALSE, color = 'blue',method='loess')+
labs(x='Date', y='Divergence')
ggplot(div, aes(x=zoo::as.yearmon(Date), y=as.numeric(divergence)))+
geom_point(size=.01)+
geom_boxplot(aes(group=zoo::as.yearmon(Date)))+
geom_smooth(se=FALSE, color = 'blue',method='loess')+
labs(x='Date (Month)', y='Divergence')
samples <- read.csv2('../data/samples_full.tsv',sep='\t')
escp <- unique(read.csv('../data/mut_escape.csv'))
mutations <- read.csv('../data/aa_mutations.csv', header=FALSE)
colnames(mutations)[1] = 'id'
library(reshape2)
mutation <- melt(mutations, 'id')[c('id','value')]
colnames(mutation) <- c('gisaid_epi_isl','Mutation')
Mutations <- merge(mutation, escp)
Mutation <- merge(Mutations, samples, by='gisaid_epi_isl')
Mutation <- unique(Mutation[c('Nextstrain_clade','Mutation','mut_escape')])
Mutation <- Mutation[! is.na(Mutation$mut_escape), ]
Mutation$mut_escape
Mutation <- Mutation[Mutation$Nextstrain_clade!='recombinant',]
ggplot(Mutation, aes(y=Nextstrain_clade, x=mut_escape, fill=Mutation))+
geom_col()+
scale_colour_gradient2()+
labs('Escape Score','Clade')+
theme_bw()
Mutation$mut_escape
LINeX <- unique(Mutation) %>%
group_by(Nextstrain_clade)%>%
summarise(S=sum(as.numeric(mut_escape)))
table(Mutation$Nextstrain_clade)
LIN <- samples[c('Nextstrain_clade','divergence')]
LinDiv <- merge(LIN , Mutation)
LinDiv$divergence
library(dplyr)
LINe <- LinDiv %>%
group_by(Nextstrain_clade)%>%
summarise(Median=median(as.numeric(divergence)))
LinMt <- merge(LINe, Mutation)
ggplot(LinMt, aes(y=reorder(Nextstrain_clade , +Median), x=mut_escape, fill=Median))+
geom_col()+
scale_colour_gradient2()+
labs('Escape Score','Clade')+
theme_bw()
LINe <- LinDiv %>%
group_by(Nextstrain_clade)%>%
summarise(Median=median(as.numeric(divergence)))
#installed.packages('ggplot2')
library('ggplot2')
library(dplyr)
library(tidyverse)
library(anytime)
library(WDI)
theme_set(theme_bw())
library(reshape2)
md <- read.csv('../data/Metadata.tsv',sep='\t')
subs <- read.csv(header=FALSE, '../data/subs.csv')
colnames(subs)[1] = 'id'
subs <- melt(subs, 'id')[c('id','value')]
colnames(subs) <- c('gisaid_epi_isl','Mutation')
length(unique(subs$Mutation))
muts <- read.csv(header=FALSE, '../data/mutations.csv')
colnames(muts)[1] = 'id'
aaM <- melt(muts, 'id')[c('id','value')]
colnames(aaM) <- c('gisaid_epi_isl','Mutation')
length(unique(aaM$Mutation))
# Split
gene_mut <- aaM %>%
separate(Mutation, c("Gene", "Mutation"), ":")
gene_mut <- unique(gene_mut[c("Gene", "Mutation")])
gene_mut <- gene_mut[gene_mut$Gene!='',]
ggplot(gene_mut, aes(x = Gene, fill = Gene))+
geom_bar()+
labs(x='Gene', y='Number of Amino Acid Mutations')
FQ <- as.data.frame(table(gene_mut$Gene))
ggplot(gene_mut, aes(y = Gene, fill = Gene, x = 1))+
geom_bar()+ ggplot2::coord_polar()+
labs(x='Gene', y='Number of Amino Acid Mutations')
cov <- read.csv2('../data/covid-19.csv', sep=',')
cov = cov[cov$total_cases > 0,]
cov <- cov[,c('continent',"location","date","total_cases","new_cases","total_deaths","new_deaths","new_cases_per_million","total_deaths_per_million","new_deaths_per_million","total_cases_per_million","new_tests","tests_per_case","new_tests_per_thousand","total_tests","total_tests_per_thousand")]
Cov <- cov %>%
group_by(location) %>%
arrange(total_tests_per_thousand) %>%
filter(row_number()==n() )
Cov$total_tests_per_thousand <- as.numeric(Cov$total_tests_per_thousand)
Cov <- Cov[! is.na(Cov$total_tests_per_thousand), ]
CCov <- Cov %>%
group_by(continent) %>%
summarise(M = median(total_tests_per_thousand) )
ggplot(Cov , aes(continent, total_tests_per_thousand, color = continent, fill = continent))+
geom_boxplot(outlier.shape = NA, alpha = .3)+
scale_y_continuous(limits = quantile(Cov$total_tests_per_thousand, c(0.1, 0.9)))+
geom_jitter()+
ggrepel::geom_text_repel(aes(label=location), size = 4,  min.segment.length = 0) +
labs(x= 'Geographic region', y = 'Total tests per thousands (1/1/2023)')
md$continent <- md$region
pango_lineage_region <- md[c('gisaid_epi_isl','pango_lineage','continent','country','date')]
aa <- read.csv2('../data/aa_mutations.csv', sep=',', header = FALSE)
colnames(aa)[1] = 'id'
library(reshape2)
aaM <- melt(aa, 'id')[c('id','value')]
colnames(aaM) <- c('gisaid_epi_isl','Mutation')
AAp <- merge(aaM,pango_lineage_region,by = 'gisaid_epi_isl')
AAp <- AAp[AAp$Mutation!='',]
AAp$p <- 1
AAc <- dcast(AAp, pango_lineage~Mutation, value.var="p",fill = 0)
rownames(AAc) <- AAc$pango_lineage
AAc <- AAc[,-1]
AAc <- t(as.matrix(AAc))
co_mat <- t(AAc) %*% AAc
M <- as.matrix(co_mat)
diag(M) <- 0
dimnames(M) <- list(colnames(df), colnames(df))
# Create graph from adjacency matrix
# ! edge weights are equal to frequency of co-occurrence
g <- igraph::graph_from_adjacency_matrix(co_mat, mode = "upper", weighted = TRUE)
# Create graph from adjacency matrix
# ! edge weights are equal to frequency of co-occurrence
g <- igraph::graph_from_adjacency_matrix(co_mat, mode = "upper", weighted = TRUE)
# Assign nodes weight equal to species frequency
g <- igraph::set.vertex.attribute(g, "v_weight", value = colSums(df))
df0 <- igraph::V(g)
df0$color <- c("red", "blue" )
igraph::V(g)$color <- c("red", "blue" )
plot(g, vertex.size=node.size*0.25)
igraph::tkplot(g)
plot(g)
View(AAp)
View(AAp)
View(AAp)
View(AAp)
View(aaM)
View(aaM)
View(AAp)
View(AAp)
AAc <- dcast(AAp, pango_lineage~Mutation, value.var="p",fill = 0)
View(AAc)
rownames(AAc) <- AAc$pango_lineage
AAc <- AAc[,-1]
heatmap(AAc)
heatmap(as.matrix(AAc))
pheatmap::pheatmap(AAc,cluster_cols = FALSE, cluster_rows = FALSE)
d = dist(AAc, method = "binary")
hc = hclust(d, method="complete")
View(hc)
plot(x = hc, labels =  row.names(hc), cex = 0.5)
plot(x = hc, labels =  row.names(hc), cex = 0.5)
plot(iris[,3:4], pch=20, col=cutree(HC,3))
plot(AAc[,3:4], pch=20, col=cutree(HC,3))
plot(AAc, pch=20, col=cutree(HC,3))
install.packages('dendextend')
# loading the package
library(dendextend)
View(aaM)
View(AAp)
View(AAc)
View(AAp)
AApc <- AAp[c('pango_lineage', 'continent')]
View(AApc)
AApc <- unique(AApc)
View(AApc)
View(AAc)
write.csv(AAc, 'PAM_muts.csv')
getwd()
setwd("~/Projects/SARS-CoV-2 2023")
write.csv(AAc, 'PAM_muts.csv')
getwd()
d <- dist(AAc)
write.csv(AAc, 'd.csv')
head(d)
head(d)
Veiw(d)
View(d)
d <- as.data.frame( dist(AAc))
c <- cor(AAc)
View(c)
c <- cor(t(AAc))
View(c)
write.csv(c, 'Cor.csv')
